{"ast":null,"code":"import { DayMilliseconds, HourMilliseconds, NowMarker, UNSET } from '../Constants';\nimport { dayTimestampStartMilliseconds } from '../DateUtilities';\n\nconst eventSorter = source => {\n  const startTime = Date.now() - 2 * HourMilliseconds;\n  const endTime = Date.now() + 48 * HourMilliseconds;\n  const today = new Date().getDay();\n  const routineSchedule = source.routine;\n  const startMidnight = dayTimestampStartMilliseconds(startTime);\n  const midnights = [];\n\n  for (let midnight = startMidnight; midnight < endTime; midnight += DayMilliseconds) {\n    midnights.push(midnight);\n  }\n\n  const constructedEvents = midnights.flatMap(midnight => {\n    const day = new Date(midnight).getDay();\n    let routineEvents = [];\n    routineSchedule.filter(routine => routine.days.length === 0 || routine.days.includes(day)).forEach(routine => {\n      let event = {\n        id: routine.id,\n        text: routine.text,\n        start: midnight + routine.start,\n        duration: routine.duration\n      };\n      routineEvents.push(event);\n    });\n    return routineEvents;\n  });\n  constructedEvents.push({\n    id: UNSET,\n    text: NowMarker,\n    duration: 0,\n    start: Date.now()\n  });\n  const currentEvents = constructedEvents.concat(source.events).sort((a, b) => {\n    if (b.start > a.start) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }).filter(event => event.start + event.duration > startTime && event.start < endTime);\n  return currentEvents;\n};\n\nexport default eventSorter;","map":{"version":3,"names":["DayMilliseconds","HourMilliseconds","NowMarker","UNSET","dayTimestampStartMilliseconds","eventSorter","source","startTime","Date","now","endTime","today","getDay","routineSchedule","routine","startMidnight","midnights","midnight","push","constructedEvents","flatMap","day","routineEvents","filter","days","length","includes","forEach","event","id","text","start","duration","currentEvents","concat","events","sort","a","b"],"sources":["/Users/dhs/do-next/src/event/EventSorter.ts"],"sourcesContent":["import { DayMilliseconds, HourMilliseconds, NowMarker, UNSET } from '../Constants'\nimport { dayTimestampStartMilliseconds } from '../DateUtilities'\nimport { EventSet, Event } from '../DoData'\n\nconst eventSorter = (source: EventSet) => {\n    const startTime = Date.now() - 2 * HourMilliseconds\n    const endTime = Date.now() + 48 * HourMilliseconds\n    const today = new Date().getDay()\n\n    const routineSchedule = source.routine\n\n    const startMidnight = dayTimestampStartMilliseconds(startTime)\n    const midnights: number[] = []\n    for (let midnight = startMidnight; midnight < endTime; midnight += DayMilliseconds) {\n        midnights.push(midnight)\n    }\n\n    const constructedEvents = midnights.flatMap((midnight) => {\n        const day = new Date(midnight).getDay()\n        let routineEvents: Event[] = []\n        routineSchedule\n        .filter(routine => routine.days.length === 0 || routine.days.includes(day))\n        .forEach((routine) => {\n            let event: Event = {\n                id: routine.id,\n                text: routine.text,\n                start: midnight + routine.start,\n                duration: routine.duration\n            }\n            routineEvents.push(event)\n        })\n        return routineEvents\n    })\n    constructedEvents.push({ id: UNSET, text: NowMarker, duration: 0, start: Date.now() })\n\n    const currentEvents = constructedEvents\n        .concat(source.events)\n        .sort((a, b) => { if (b.start > a.start) { return -1 } else { return 1 } })\n        .filter(event => (event.start + event.duration) > startTime && event.start < endTime)\n\n    return currentEvents\n}\n\nexport default eventSorter\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,gBAA1B,EAA4CC,SAA5C,EAAuDC,KAAvD,QAAoE,cAApE;AACA,SAASC,6BAAT,QAA8C,kBAA9C;;AAGA,MAAMC,WAAW,GAAIC,MAAD,IAAsB;EACtC,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAIR,gBAAnC;EACA,MAAMS,OAAO,GAAGF,IAAI,CAACC,GAAL,KAAa,KAAKR,gBAAlC;EACA,MAAMU,KAAK,GAAG,IAAIH,IAAJ,GAAWI,MAAX,EAAd;EAEA,MAAMC,eAAe,GAAGP,MAAM,CAACQ,OAA/B;EAEA,MAAMC,aAAa,GAAGX,6BAA6B,CAACG,SAAD,CAAnD;EACA,MAAMS,SAAmB,GAAG,EAA5B;;EACA,KAAK,IAAIC,QAAQ,GAAGF,aAApB,EAAmCE,QAAQ,GAAGP,OAA9C,EAAuDO,QAAQ,IAAIjB,eAAnE,EAAoF;IAChFgB,SAAS,CAACE,IAAV,CAAeD,QAAf;EACH;;EAED,MAAME,iBAAiB,GAAGH,SAAS,CAACI,OAAV,CAAmBH,QAAD,IAAc;IACtD,MAAMI,GAAG,GAAG,IAAIb,IAAJ,CAASS,QAAT,EAAmBL,MAAnB,EAAZ;IACA,IAAIU,aAAsB,GAAG,EAA7B;IACAT,eAAe,CACdU,MADD,CACQT,OAAO,IAAIA,OAAO,CAACU,IAAR,CAAaC,MAAb,KAAwB,CAAxB,IAA6BX,OAAO,CAACU,IAAR,CAAaE,QAAb,CAAsBL,GAAtB,CADhD,EAECM,OAFD,CAEUb,OAAD,IAAa;MAClB,IAAIc,KAAY,GAAG;QACfC,EAAE,EAAEf,OAAO,CAACe,EADG;QAEfC,IAAI,EAAEhB,OAAO,CAACgB,IAFC;QAGfC,KAAK,EAAEd,QAAQ,GAAGH,OAAO,CAACiB,KAHX;QAIfC,QAAQ,EAAElB,OAAO,CAACkB;MAJH,CAAnB;MAMAV,aAAa,CAACJ,IAAd,CAAmBU,KAAnB;IACH,CAVD;IAWA,OAAON,aAAP;EACH,CAfyB,CAA1B;EAgBAH,iBAAiB,CAACD,IAAlB,CAAuB;IAAEW,EAAE,EAAE1B,KAAN;IAAa2B,IAAI,EAAE5B,SAAnB;IAA8B8B,QAAQ,EAAE,CAAxC;IAA2CD,KAAK,EAAEvB,IAAI,CAACC,GAAL;EAAlD,CAAvB;EAEA,MAAMwB,aAAa,GAAGd,iBAAiB,CAClCe,MADiB,CACV5B,MAAM,CAAC6B,MADG,EAEjBC,IAFiB,CAEZ,CAACC,CAAD,EAAIC,CAAJ,KAAU;IAAE,IAAIA,CAAC,CAACP,KAAF,GAAUM,CAAC,CAACN,KAAhB,EAAuB;MAAE,OAAO,CAAC,CAAR;IAAW,CAApC,MAA0C;MAAE,OAAO,CAAP;IAAU;EAAE,CAFxD,EAGjBR,MAHiB,CAGVK,KAAK,IAAKA,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACI,QAArB,GAAiCzB,SAAjC,IAA8CqB,KAAK,CAACG,KAAN,GAAcrB,OAH3D,CAAtB;EAKA,OAAOuB,aAAP;AACH,CArCD;;AAuCA,eAAe5B,WAAf"},"metadata":{},"sourceType":"module"}