{"ast":null,"code":"import _toConsumableArray from \"/Users/dhs/do-next/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { useRef, useMemo, useEffect, useCallback, useSyncExternalStore } from 'react'; // in memory fallback used then `localStorage` throws an error\n\nexport var inMemoryData = new Map();\nexport default function useLocalStorageState(key, options) {\n  // istanbul ignore next\n  if (typeof useSyncExternalStore === 'undefined') {\n    throw new TypeError(\"You are using React 17 or below. Install with \\\"npm install use-local-storage-state@17\\\".\");\n  }\n\n  var defaultValue = options === null || options === void 0 ? void 0 : options.defaultValue; // SSR support\n  // - on the server, return a constant value\n  // - this makes the implementation simpler and smaller the `localStorage` object is `undefined`\n  //   on the server\n\n  if (typeof window === 'undefined') {\n    return [defaultValue, function () {}, {\n      isPersistent: true,\n      removeItem: function removeItem() {}\n    }];\n  }\n\n  var serializer = options === null || options === void 0 ? void 0 : options.serializer; // disabling ESLint because the above if statement can be executed only on the server. the value\n  // of `window` can't change between calls.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  return useBrowserLocalStorageState(key, defaultValue, options === null || options === void 0 ? void 0 : options.storageSync, serializer === null || serializer === void 0 ? void 0 : serializer.parse, serializer === null || serializer === void 0 ? void 0 : serializer.stringify);\n}\n\nfunction useBrowserLocalStorageState(key, defaultValue) {\n  var storageSync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var parse = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : parseJSON;\n  var stringify = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : JSON.stringify;\n  var initialDefaultValue = useRef(defaultValue).current; // store default value in localStorage:\n  // - initial issue: https://github.com/astoilkov/use-local-storage-state/issues/26\n  //   issues that were caused by incorrect initial and secondary implementations:\n  //   - https://github.com/astoilkov/use-local-storage-state/issues/30\n  //   - https://github.com/astoilkov/use-local-storage-state/issues/33\n\n  if (!inMemoryData.has(key) && initialDefaultValue !== undefined && localStorage.getItem(key) === null) {\n    // reasons for `localStorage` to throw an error:\n    // - maximum quota is exceeded\n    // - under Mobile Safari (since iOS 5) when the user enters private mode\n    //   `localStorage.setItem()` will throw\n    // - trying to access localStorage object when cookies are disabled in Safari throws\n    //   \"SecurityError: The operation is insecure.\"\n    try {\n      localStorage.setItem(key, stringify(initialDefaultValue));\n    } catch (_a) {}\n  } // we keep the `parsed` value in a ref because `useSyncExternalStore` requires a cached version\n\n\n  var storageValue = useRef({\n    item: null,\n    parsed: initialDefaultValue\n  });\n  var value = useSyncExternalStore(useCallback(function (onStoreChange) {\n    var onChange = function onChange(localKey) {\n      if (key === localKey) {\n        onStoreChange();\n      }\n    };\n\n    callbacks.add(onChange);\n    return function () {\n      callbacks.delete(onChange);\n    };\n  }, [key]), // eslint-disable-next-line react-hooks/exhaustive-deps\n  function () {\n    var item = localStorage.getItem(key);\n\n    if (inMemoryData.has(key)) {\n      storageValue.current = {\n        item: item,\n        parsed: inMemoryData.get(key)\n      };\n    } else if (item !== storageValue.current.item) {\n      var parsed;\n\n      try {\n        parsed = item === null ? initialDefaultValue : parse(item);\n      } catch (_a) {\n        parsed = initialDefaultValue;\n      }\n\n      storageValue.current = {\n        item: item,\n        parsed: parsed\n      };\n    }\n\n    return storageValue.current.parsed;\n  }, // istanbul ignore next\n  function () {\n    return initialDefaultValue;\n  });\n  var setState = useCallback(function (newValue) {\n    var value = newValue instanceof Function ? newValue(storageValue.current.parsed) : newValue; // reasons for `localStorage` to throw an error:\n    // - maximum quota is exceeded\n    // - under Mobile Safari (since iOS 5) when the user enters private mode\n    //   `localStorage.setItem()` will throw\n    // - trying to access localStorage object when cookies are disabled in Safari throws\n    //   \"SecurityError: The operation is insecure.\"\n\n    try {\n      localStorage.setItem(key, stringify(value));\n      inMemoryData.delete(key);\n    } catch (_a) {\n      inMemoryData.set(key, value);\n    }\n\n    triggerCallbacks(key);\n  }, [key, stringify]); // - syncs change across tabs, windows, iframes\n  // - the `storage` event is called only in all tabs, windows, iframe's except the one that\n  //   triggered the change\n\n  useEffect(function () {\n    if (!storageSync) {\n      return undefined;\n    }\n\n    var onStorage = function onStorage(e) {\n      if (e.storageArea === localStorage && e.key === key) {\n        triggerCallbacks(key);\n      }\n    };\n\n    window.addEventListener('storage', onStorage);\n    return function () {\n      return window.removeEventListener('storage', onStorage);\n    };\n  }, [key, storageSync]);\n  return useMemo(function () {\n    return [value, setState, {\n      isPersistent: value === initialDefaultValue || !inMemoryData.has(key),\n      removeItem: function removeItem() {\n        inMemoryData.delete(key);\n        localStorage.removeItem(key);\n        triggerCallbacks(key);\n      }\n    }];\n  }, [key, setState, value, initialDefaultValue]);\n} // notifies all instances using the same `key` to update\n\n\nvar callbacks = new Set();\n\nfunction triggerCallbacks(key) {\n  for (var _i = 0, _arr = _toConsumableArray(callbacks); _i < _arr.length; _i++) {\n    var callback = _arr[_i];\n    callback(key);\n  }\n} // a wrapper for `JSON.parse()` that supports \"undefined\" value. otherwise,\n// `JSON.parse(JSON.stringify(undefined))` returns the string \"undefined\" not the value `undefined`\n\n\nfunction parseJSON(value) {\n  return value === 'undefined' ? undefined : JSON.parse(value);\n}","map":{"version":3,"names":["useRef","useMemo","useEffect","useCallback","useSyncExternalStore","inMemoryData","Map","useLocalStorageState","key","options","TypeError","defaultValue","window","isPersistent","removeItem","serializer","useBrowserLocalStorageState","storageSync","parse","stringify","parseJSON","JSON","initialDefaultValue","current","has","undefined","localStorage","getItem","setItem","_a","storageValue","item","parsed","value","onStoreChange","onChange","localKey","callbacks","add","delete","get","setState","newValue","Function","set","triggerCallbacks","onStorage","e","storageArea","addEventListener","removeEventListener","Set","callback"],"sources":["/Users/dhs/do-next/node_modules/use-local-storage-state/es/src/useLocalStorageState.js"],"sourcesContent":["import { useRef, useMemo, useEffect, useCallback, useSyncExternalStore } from 'react';\n// in memory fallback used then `localStorage` throws an error\nexport const inMemoryData = new Map();\nexport default function useLocalStorageState(key, options) {\n    // istanbul ignore next\n    if (typeof useSyncExternalStore === 'undefined') {\n        throw new TypeError(`You are using React 17 or below. Install with \"npm install use-local-storage-state@17\".`);\n    }\n    const defaultValue = options === null || options === void 0 ? void 0 : options.defaultValue;\n    // SSR support\n    // - on the server, return a constant value\n    // - this makes the implementation simpler and smaller the `localStorage` object is `undefined`\n    //   on the server\n    if (typeof window === 'undefined') {\n        return [\n            defaultValue,\n            () => { },\n            {\n                isPersistent: true,\n                removeItem: () => { },\n            },\n        ];\n    }\n    const serializer = options === null || options === void 0 ? void 0 : options.serializer;\n    // disabling ESLint because the above if statement can be executed only on the server. the value\n    // of `window` can't change between calls.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useBrowserLocalStorageState(key, defaultValue, options === null || options === void 0 ? void 0 : options.storageSync, serializer === null || serializer === void 0 ? void 0 : serializer.parse, serializer === null || serializer === void 0 ? void 0 : serializer.stringify);\n}\nfunction useBrowserLocalStorageState(key, defaultValue, storageSync = true, parse = parseJSON, stringify = JSON.stringify) {\n    const initialDefaultValue = useRef(defaultValue).current;\n    // store default value in localStorage:\n    // - initial issue: https://github.com/astoilkov/use-local-storage-state/issues/26\n    //   issues that were caused by incorrect initial and secondary implementations:\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/30\n    //   - https://github.com/astoilkov/use-local-storage-state/issues/33\n    if (!inMemoryData.has(key) &&\n        initialDefaultValue !== undefined &&\n        localStorage.getItem(key) === null) {\n        // reasons for `localStorage` to throw an error:\n        // - maximum quota is exceeded\n        // - under Mobile Safari (since iOS 5) when the user enters private mode\n        //   `localStorage.setItem()` will throw\n        // - trying to access localStorage object when cookies are disabled in Safari throws\n        //   \"SecurityError: The operation is insecure.\"\n        try {\n            localStorage.setItem(key, stringify(initialDefaultValue));\n        }\n        catch (_a) { }\n    }\n    // we keep the `parsed` value in a ref because `useSyncExternalStore` requires a cached version\n    const storageValue = useRef({\n        item: null,\n        parsed: initialDefaultValue,\n    });\n    const value = useSyncExternalStore(useCallback((onStoreChange) => {\n        const onChange = (localKey) => {\n            if (key === localKey) {\n                onStoreChange();\n            }\n        };\n        callbacks.add(onChange);\n        return () => {\n            callbacks.delete(onChange);\n        };\n    }, [key]), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    () => {\n        const item = localStorage.getItem(key);\n        if (inMemoryData.has(key)) {\n            storageValue.current = {\n                item,\n                parsed: inMemoryData.get(key),\n            };\n        }\n        else if (item !== storageValue.current.item) {\n            let parsed;\n            try {\n                parsed = item === null ? initialDefaultValue : parse(item);\n            }\n            catch (_a) {\n                parsed = initialDefaultValue;\n            }\n            storageValue.current = {\n                item,\n                parsed,\n            };\n        }\n        return storageValue.current.parsed;\n    }, \n    // istanbul ignore next\n    () => initialDefaultValue);\n    const setState = useCallback((newValue) => {\n        const value = newValue instanceof Function ? newValue(storageValue.current.parsed) : newValue;\n        // reasons for `localStorage` to throw an error:\n        // - maximum quota is exceeded\n        // - under Mobile Safari (since iOS 5) when the user enters private mode\n        //   `localStorage.setItem()` will throw\n        // - trying to access localStorage object when cookies are disabled in Safari throws\n        //   \"SecurityError: The operation is insecure.\"\n        try {\n            localStorage.setItem(key, stringify(value));\n            inMemoryData.delete(key);\n        }\n        catch (_a) {\n            inMemoryData.set(key, value);\n        }\n        triggerCallbacks(key);\n    }, [key, stringify]);\n    // - syncs change across tabs, windows, iframes\n    // - the `storage` event is called only in all tabs, windows, iframe's except the one that\n    //   triggered the change\n    useEffect(() => {\n        if (!storageSync) {\n            return undefined;\n        }\n        const onStorage = (e) => {\n            if (e.storageArea === localStorage && e.key === key) {\n                triggerCallbacks(key);\n            }\n        };\n        window.addEventListener('storage', onStorage);\n        return () => window.removeEventListener('storage', onStorage);\n    }, [key, storageSync]);\n    return useMemo(() => [\n        value,\n        setState,\n        {\n            isPersistent: value === initialDefaultValue || !inMemoryData.has(key),\n            removeItem() {\n                inMemoryData.delete(key);\n                localStorage.removeItem(key);\n                triggerCallbacks(key);\n            },\n        },\n    ], [key, setState, value, initialDefaultValue]);\n}\n// notifies all instances using the same `key` to update\nconst callbacks = new Set();\nfunction triggerCallbacks(key) {\n    for (const callback of [...callbacks]) {\n        callback(key);\n    }\n}\n// a wrapper for `JSON.parse()` that supports \"undefined\" value. otherwise,\n// `JSON.parse(JSON.stringify(undefined))` returns the string \"undefined\" not the value `undefined`\nfunction parseJSON(value) {\n    return value === 'undefined' ? undefined : JSON.parse(value);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}