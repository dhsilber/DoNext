{"ast":null,"code":"import { DayMilliseconds, HourMilliseconds, NowMarker, UNSET } from '../Constants';\nimport { dayTimestampStartMilliseconds } from '../DateUtilities';\n\nconst eventSorter = source => {\n  const startTime = Date.now() - 2 * HourMilliseconds;\n  const endTime = Date.now() + 48 * HourMilliseconds;\n  const routineSchedule = source.routine;\n  const startMidnight = dayTimestampStartMilliseconds(startTime);\n  const midnights = [];\n\n  for (let midnight = startMidnight; midnight < endTime; midnight += DayMilliseconds) {\n    midnights.push(midnight);\n  }\n\n  const constructedEvents = midnights.flatMap(midnight => {\n    const day = new Date(midnight).getDay();\n    let routineEvents = [];\n    routineSchedule.filter(routine => routine.days.length === 0 || routine.days.includes(day)).forEach(routine => {\n      let event = {\n        id: routine.id,\n        text: routine.text,\n        start: midnight + routine.start,\n        duration: routine.duration\n      };\n      routineEvents.push(event);\n    });\n    return routineEvents;\n  });\n  constructedEvents.push({\n    id: UNSET,\n    text: NowMarker,\n    duration: 0,\n    start: Date.now()\n  });\n  const currentEvents = constructedEvents.concat(source.events).sort((a, b) => {\n    if (b.start > a.start) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }).filter(event => event.start + event.duration > startTime && event.start < endTime);\n  return currentEvents;\n};\n\nexport default eventSorter;","map":{"version":3,"names":["DayMilliseconds","HourMilliseconds","NowMarker","UNSET","dayTimestampStartMilliseconds","eventSorter","source","startTime","Date","now","endTime","routineSchedule","routine","startMidnight","midnights","midnight","push","constructedEvents","flatMap","day","getDay","routineEvents","filter","days","length","includes","forEach","event","id","text","start","duration","currentEvents","concat","events","sort","a","b"],"sources":["/Users/dhs/do-next/src/event/EventSorter.ts"],"sourcesContent":["import { DayMilliseconds, HourMilliseconds, NowMarker, UNSET } from '../Constants'\nimport { dayTimestampStartMilliseconds } from '../DateUtilities'\nimport { EventSet, Event } from '../DoData'\n\nconst eventSorter = (source: EventSet) => {\n    const startTime = Date.now() - 2 * HourMilliseconds\n    const endTime = Date.now() + 48 * HourMilliseconds\n\n    const routineSchedule = source.routine\n\n    const startMidnight = dayTimestampStartMilliseconds(startTime)\n    const midnights: number[] = []\n    for (let midnight = startMidnight; midnight < endTime; midnight += DayMilliseconds) {\n        midnights.push(midnight)\n    }\n\n    const constructedEvents = midnights.flatMap((midnight) => {\n        const day = new Date(midnight).getDay()\n        let routineEvents: Event[] = []\n        routineSchedule\n            .filter(routine => routine.days.length === 0 || routine.days.includes(day))\n            .forEach((routine) => {\n                let event: Event = {\n                    id: routine.id,\n                    text: routine.text,\n                    start: midnight + routine.start,\n                    duration: routine.duration\n                }\n                routineEvents.push(event)\n            })\n        return routineEvents\n    })\n    constructedEvents.push({ id: UNSET, text: NowMarker, duration: 0, start: Date.now() })\n\n    const currentEvents = constructedEvents\n        .concat(source.events)\n        .sort((a, b) => { if (b.start > a.start) { return -1 } else { return 1 } })\n        .filter(event => (event.start + event.duration) > startTime && event.start < endTime)\n\n    return currentEvents\n}\n\nexport default eventSorter\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,gBAA1B,EAA4CC,SAA5C,EAAuDC,KAAvD,QAAoE,cAApE;AACA,SAASC,6BAAT,QAA8C,kBAA9C;;AAGA,MAAMC,WAAW,GAAIC,MAAD,IAAsB;EACtC,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAIR,gBAAnC;EACA,MAAMS,OAAO,GAAGF,IAAI,CAACC,GAAL,KAAa,KAAKR,gBAAlC;EAEA,MAAMU,eAAe,GAAGL,MAAM,CAACM,OAA/B;EAEA,MAAMC,aAAa,GAAGT,6BAA6B,CAACG,SAAD,CAAnD;EACA,MAAMO,SAAmB,GAAG,EAA5B;;EACA,KAAK,IAAIC,QAAQ,GAAGF,aAApB,EAAmCE,QAAQ,GAAGL,OAA9C,EAAuDK,QAAQ,IAAIf,eAAnE,EAAoF;IAChFc,SAAS,CAACE,IAAV,CAAeD,QAAf;EACH;;EAED,MAAME,iBAAiB,GAAGH,SAAS,CAACI,OAAV,CAAmBH,QAAD,IAAc;IACtD,MAAMI,GAAG,GAAG,IAAIX,IAAJ,CAASO,QAAT,EAAmBK,MAAnB,EAAZ;IACA,IAAIC,aAAsB,GAAG,EAA7B;IACAV,eAAe,CACVW,MADL,CACYV,OAAO,IAAIA,OAAO,CAACW,IAAR,CAAaC,MAAb,KAAwB,CAAxB,IAA6BZ,OAAO,CAACW,IAAR,CAAaE,QAAb,CAAsBN,GAAtB,CADpD,EAEKO,OAFL,CAEcd,OAAD,IAAa;MAClB,IAAIe,KAAY,GAAG;QACfC,EAAE,EAAEhB,OAAO,CAACgB,EADG;QAEfC,IAAI,EAAEjB,OAAO,CAACiB,IAFC;QAGfC,KAAK,EAAEf,QAAQ,GAAGH,OAAO,CAACkB,KAHX;QAIfC,QAAQ,EAAEnB,OAAO,CAACmB;MAJH,CAAnB;MAMAV,aAAa,CAACL,IAAd,CAAmBW,KAAnB;IACH,CAVL;IAWA,OAAON,aAAP;EACH,CAfyB,CAA1B;EAgBAJ,iBAAiB,CAACD,IAAlB,CAAuB;IAAEY,EAAE,EAAEzB,KAAN;IAAa0B,IAAI,EAAE3B,SAAnB;IAA8B6B,QAAQ,EAAE,CAAxC;IAA2CD,KAAK,EAAEtB,IAAI,CAACC,GAAL;EAAlD,CAAvB;EAEA,MAAMuB,aAAa,GAAGf,iBAAiB,CAClCgB,MADiB,CACV3B,MAAM,CAAC4B,MADG,EAEjBC,IAFiB,CAEZ,CAACC,CAAD,EAAIC,CAAJ,KAAU;IAAE,IAAIA,CAAC,CAACP,KAAF,GAAUM,CAAC,CAACN,KAAhB,EAAuB;MAAE,OAAO,CAAC,CAAR;IAAW,CAApC,MAA0C;MAAE,OAAO,CAAP;IAAU;EAAE,CAFxD,EAGjBR,MAHiB,CAGVK,KAAK,IAAKA,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACI,QAArB,GAAiCxB,SAAjC,IAA8CoB,KAAK,CAACG,KAAN,GAAcpB,OAH3D,CAAtB;EAKA,OAAOsB,aAAP;AACH,CApCD;;AAsCA,eAAe3B,WAAf"},"metadata":{},"sourceType":"module"}