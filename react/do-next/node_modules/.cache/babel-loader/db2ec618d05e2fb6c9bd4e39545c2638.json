{"ast":null,"code":"var _jsxFileName = \"/Users/dhs/do-next/src/LoadData.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fileHandler = async event => {\n  var _target$files, _target$files$item, _target$files2, _target$files2$item;\n\n  console.log(\"event: \", event);\n  const target = event.target;\n  console.log(\"target files: \", target.files);\n  console.log(\"blob: \", (_target$files = target.files) === null || _target$files === void 0 ? void 0 : (_target$files$item = _target$files.item(0)) === null || _target$files$item === void 0 ? void 0 : _target$files$item.text());\n  const blobData = await ((_target$files2 = target.files) === null || _target$files2 === void 0 ? void 0 : (_target$files2$item = _target$files2.item(0)) === null || _target$files2$item === void 0 ? void 0 : _target$files2$item.text());\n\n  if (blobData) {\n    console.log(\"Data: \", blobData);\n    const data = JSON.parse(blobData);\n    console.log(\"Data: \", data.todos);\n  }\n};\n\nconst LoadData = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Ingest:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"text/json\",\n      onInput: event => fileHandler(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 12\n  }, this);\n};\n\n_c = LoadData;\nexport default LoadData;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadData\");","map":{"version":3,"names":["fileHandler","event","console","log","target","files","item","text","blobData","data","JSON","parse","todos","LoadData"],"sources":["/Users/dhs/do-next/src/LoadData.tsx"],"sourcesContent":["import { ChangeEvent, FormEvent } from \"react\"\n\nconst fileHandler = async (event: FormEvent<HTMLInputElement>) => {\n    console.log( \"event: \",event)\n    const target = (event.target as HTMLInputElement)\n    console.log(\"target files: \", target.files)\n    console.log(\"blob: \", target.files?.item(0)?.text())\n\n    const blobData = await target.files?.item(0)?.text()\n    if (blobData) {\n    console.log(\"Data: \", blobData)\n\n    const data = JSON.parse(blobData)\n    console.log(\"Data: \", data.todos)\n\n    \n    }\n}\n\nconst LoadData = () => {\n    return <div>\n        Ingest:\n        <input type=\"file\" accept=\"text/json\" onInput={(event) => fileHandler(event)} />\n\n    </div>\n}\n\nexport default LoadData\n"],"mappings":";;;AAEA,MAAMA,WAAW,GAAG,MAAOC,KAAP,IAA8C;EAAA;;EAC9DC,OAAO,CAACC,GAAR,CAAa,SAAb,EAAuBF,KAAvB;EACA,MAAMG,MAAM,GAAIH,KAAK,CAACG,MAAtB;EACAF,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,MAAM,CAACC,KAArC;EACAH,OAAO,CAACC,GAAR,CAAY,QAAZ,mBAAsBC,MAAM,CAACC,KAA7B,wEAAsB,cAAcC,IAAd,CAAmB,CAAnB,CAAtB,uDAAsB,mBAAuBC,IAAvB,EAAtB;EAEA,MAAMC,QAAQ,GAAG,yBAAMJ,MAAM,CAACC,KAAb,0EAAM,eAAcC,IAAd,CAAmB,CAAnB,CAAN,wDAAM,oBAAuBC,IAAvB,EAAN,CAAjB;;EACA,IAAIC,QAAJ,EAAc;IACdN,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBK,QAAtB;IAEA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAb;IACAN,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBM,IAAI,CAACG,KAA3B;EAGC;AACJ,CAfD;;AAiBA,MAAMC,QAAQ,GAAG,MAAM;EACnB,oBAAO;IAAA,mCAEH;MAAO,IAAI,EAAC,MAAZ;MAAmB,MAAM,EAAC,WAA1B;MAAsC,OAAO,EAAGZ,KAAD,IAAWD,WAAW,CAACC,KAAD;IAArE;MAAA;MAAA;MAAA;IAAA,QAFG;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAKH,CAND;;KAAMY,Q;AAQN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}