{"ast":null,"code":"var _jsxFileName = \"/Users/dhs/do-next/src/track/TrackListElement.tsx\";\nimport { formatDate } from \"../DateUtilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TrackListElement = _ref => {\n  let {\n    track,\n    tracker\n  } = _ref;\n  // const message = ` ${track.minutes} minutes since ${new Date(track.beginning).toISOString().split('T')[0]}`\n  const hasTimestamps = track.tracked.length > 0;\n  const lastTimestamp = hasTimestamps ? formatDate(new Date(track.tracked[0])) : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onClick: event => {\n          tracker(track);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this), track.text]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), hasTimestamps && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"last tracked at:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: lastTimestamp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 12\n  }, this);\n};\n\n_c = TrackListElement;\nexport default TrackListElement;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrackListElement\");","map":{"version":3,"names":["formatDate","TrackListElement","track","tracker","hasTimestamps","tracked","length","lastTimestamp","Date","event","text"],"sources":["/Users/dhs/do-next/src/track/TrackListElement.tsx"],"sourcesContent":["import { formatDate } from \"../DateUtilities\"\nimport { Track } from \"../DoData\"\n\ninterface TrackListElementProps {\n    track: Track\n    tracker: (track: Track) => void\n}\n\nconst TrackListElement = ({ track, tracker }: TrackListElementProps) => {\n    // const message = ` ${track.minutes} minutes since ${new Date(track.beginning).toISOString().split('T')[0]}`\n    const hasTimestamps = track.tracked.length > 0\n    const lastTimestamp = hasTimestamps ? formatDate(new Date(track.tracked[0])) : ''\n    return <div>\n        <label>\n            <input\n                type='checkbox'\n                onClick={(event) => { tracker(track) }}\n            />\n            {track.text}\n        </label>\n        {hasTimestamps && <span>last tracked at:</span>}\n        <span>{lastTimestamp}</span>\n    </div>\n}\n\nexport default TrackListElement\n"],"mappings":";AAAA,SAASA,UAAT,QAA2B,kBAA3B;;;AAQA,MAAMC,gBAAgB,GAAG,QAA+C;EAAA,IAA9C;IAAEC,KAAF;IAASC;EAAT,CAA8C;EACpE;EACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,OAAN,CAAcC,MAAd,GAAuB,CAA7C;EACA,MAAMC,aAAa,GAAGH,aAAa,GAAGJ,UAAU,CAAC,IAAIQ,IAAJ,CAASN,KAAK,CAACG,OAAN,CAAc,CAAd,CAAT,CAAD,CAAb,GAA4C,EAA/E;EACA,oBAAO;IAAA,wBACH;MAAA,wBACI;QACI,IAAI,EAAC,UADT;QAEI,OAAO,EAAGI,KAAD,IAAW;UAAEN,OAAO,CAACD,KAAD,CAAP;QAAgB;MAF1C;QAAA;QAAA;QAAA;MAAA,QADJ,EAKKA,KAAK,CAACQ,IALX;IAAA;MAAA;MAAA;MAAA;IAAA,QADG,EAQFN,aAAa,iBAAI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARf,eASH;MAAA,UAAOG;IAAP;MAAA;MAAA;MAAA;IAAA,QATG;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAWH,CAfD;;KAAMN,gB;AAiBN,eAAeA,gBAAf"},"metadata":{},"sourceType":"module"}